// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace RPCProto {
class RPC_CALL_FUNCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPC_CALL_FUNC> _instance;
} _RPC_CALL_FUNC_default_instance_;
class RPC_CALL_RESULTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPC_CALL_RESULT> _instance;
} _RPC_CALL_RESULT_default_instance_;
}  // namespace RPCProto
static void InitDefaultsscc_info_RPC_CALL_FUNC_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RPCProto::_RPC_CALL_FUNC_default_instance_;
    new (ptr) ::RPCProto::RPC_CALL_FUNC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RPCProto::RPC_CALL_FUNC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPC_CALL_FUNC_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RPC_CALL_FUNC_rpc_2eproto}, {}};

static void InitDefaultsscc_info_RPC_CALL_RESULT_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RPCProto::_RPC_CALL_RESULT_default_instance_;
    new (ptr) ::RPCProto::RPC_CALL_RESULT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RPCProto::RPC_CALL_RESULT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPC_CALL_RESULT_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RPC_CALL_RESULT_rpc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpc_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RPCProto::RPC_CALL_FUNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RPCProto::RPC_CALL_FUNC, ifuncid_),
  PROTOBUF_FIELD_OFFSET(::RPCProto::RPC_CALL_FUNC, strpdfpathin_),
  PROTOBUF_FIELD_OFFSET(::RPCProto::RPC_CALL_FUNC, strotherpathout_),
  PROTOBUF_FIELD_OFFSET(::RPCProto::RPC_CALL_FUNC, isaveformat_),
  PROTOBUF_FIELD_OFFSET(::RPCProto::RPC_CALL_FUNC, userdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RPCProto::RPC_CALL_RESULT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RPCProto::RPC_CALL_RESULT, userdata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RPCProto::RPC_CALL_FUNC)},
  { 10, -1, sizeof(::RPCProto::RPC_CALL_RESULT)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RPCProto::_RPC_CALL_FUNC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RPCProto::_RPC_CALL_RESULT_default_instance_),
};

const char descriptor_table_protodef_rpc_2eproto[] =
  "\n\trpc.proto\022\010RPCProto\"v\n\rRPC_CALL_FUNC\022\017"
  "\n\007iFuncID\030\001 \001(\005\022\024\n\014strPdfPathIn\030\002 \001(\t\022\027\n"
  "\017strOtherPathOut\030\003 \001(\t\022\023\n\013iSaveFormat\030\004 "
  "\001(\005\022\020\n\010UserData\030\005 \001(\004\"#\n\017RPC_CALL_RESULT"
  "\022\020\n\010UserData\030\001 \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rpc_2eproto_sccs[2] = {
  &scc_info_RPC_CALL_FUNC_rpc_2eproto.base,
  &scc_info_RPC_CALL_RESULT_rpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpc_2eproto_once;
static bool descriptor_table_rpc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto = {
  &descriptor_table_rpc_2eproto_initialized, descriptor_table_protodef_rpc_2eproto, "rpc.proto", 186,
  &descriptor_table_rpc_2eproto_once, descriptor_table_rpc_2eproto_sccs, descriptor_table_rpc_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_rpc_2eproto::offsets,
  file_level_metadata_rpc_2eproto, 2, file_level_enum_descriptors_rpc_2eproto, file_level_service_descriptors_rpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rpc_2eproto), true);
namespace RPCProto {

// ===================================================================

void RPC_CALL_FUNC::InitAsDefaultInstance() {
}
class RPC_CALL_FUNC::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPC_CALL_FUNC::kIFuncIDFieldNumber;
const int RPC_CALL_FUNC::kStrPdfPathInFieldNumber;
const int RPC_CALL_FUNC::kStrOtherPathOutFieldNumber;
const int RPC_CALL_FUNC::kISaveFormatFieldNumber;
const int RPC_CALL_FUNC::kUserDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPC_CALL_FUNC::RPC_CALL_FUNC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RPCProto.RPC_CALL_FUNC)
}
RPC_CALL_FUNC::RPC_CALL_FUNC(const RPC_CALL_FUNC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strpdfpathin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.strpdfpathin().size() > 0) {
    strpdfpathin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strpdfpathin_);
  }
  strotherpathout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.strotherpathout().size() > 0) {
    strotherpathout_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strotherpathout_);
  }
  ::memcpy(&ifuncid_, &from.ifuncid_,
    static_cast<size_t>(reinterpret_cast<char*>(&userdata_) -
    reinterpret_cast<char*>(&ifuncid_)) + sizeof(userdata_));
  // @@protoc_insertion_point(copy_constructor:RPCProto.RPC_CALL_FUNC)
}

void RPC_CALL_FUNC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPC_CALL_FUNC_rpc_2eproto.base);
  strpdfpathin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strotherpathout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ifuncid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userdata_) -
      reinterpret_cast<char*>(&ifuncid_)) + sizeof(userdata_));
}

RPC_CALL_FUNC::~RPC_CALL_FUNC() {
  // @@protoc_insertion_point(destructor:RPCProto.RPC_CALL_FUNC)
  SharedDtor();
}

void RPC_CALL_FUNC::SharedDtor() {
  strpdfpathin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strotherpathout_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPC_CALL_FUNC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPC_CALL_FUNC& RPC_CALL_FUNC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPC_CALL_FUNC_rpc_2eproto.base);
  return *internal_default_instance();
}


void RPC_CALL_FUNC::Clear() {
// @@protoc_insertion_point(message_clear_start:RPCProto.RPC_CALL_FUNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strpdfpathin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strotherpathout_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ifuncid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userdata_) -
      reinterpret_cast<char*>(&ifuncid_)) + sizeof(userdata_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RPC_CALL_FUNC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 iFuncID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ifuncid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strPdfPathIn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_strpdfpathin(), ptr, ctx, "RPCProto.RPC_CALL_FUNC.strPdfPathIn");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strOtherPathOut = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_strotherpathout(), ptr, ctx, "RPCProto.RPC_CALL_FUNC.strOtherPathOut");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iSaveFormat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          isaveformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 UserData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          userdata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RPC_CALL_FUNC::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:RPCProto.RPC_CALL_FUNC)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 iFuncID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifuncid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strPdfPathIn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_strpdfpathin()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->strpdfpathin().data(), static_cast<int>(this->strpdfpathin().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "RPCProto.RPC_CALL_FUNC.strPdfPathIn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strOtherPathOut = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_strotherpathout()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->strotherpathout().data(), static_cast<int>(this->strotherpathout().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "RPCProto.RPC_CALL_FUNC.strOtherPathOut"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 iSaveFormat = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &isaveformat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 UserData = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userdata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RPCProto.RPC_CALL_FUNC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RPCProto.RPC_CALL_FUNC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RPC_CALL_FUNC::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RPCProto.RPC_CALL_FUNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iFuncID = 1;
  if (this->ifuncid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ifuncid(), output);
  }

  // string strPdfPathIn = 2;
  if (this->strpdfpathin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->strpdfpathin().data(), static_cast<int>(this->strpdfpathin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPCProto.RPC_CALL_FUNC.strPdfPathIn");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strpdfpathin(), output);
  }

  // string strOtherPathOut = 3;
  if (this->strotherpathout().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->strotherpathout().data(), static_cast<int>(this->strotherpathout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPCProto.RPC_CALL_FUNC.strOtherPathOut");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->strotherpathout(), output);
  }

  // int32 iSaveFormat = 4;
  if (this->isaveformat() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->isaveformat(), output);
  }

  // uint64 UserData = 5;
  if (this->userdata() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->userdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RPCProto.RPC_CALL_FUNC)
}

::PROTOBUF_NAMESPACE_ID::uint8* RPC_CALL_FUNC::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPCProto.RPC_CALL_FUNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iFuncID = 1;
  if (this->ifuncid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ifuncid(), target);
  }

  // string strPdfPathIn = 2;
  if (this->strpdfpathin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->strpdfpathin().data(), static_cast<int>(this->strpdfpathin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPCProto.RPC_CALL_FUNC.strPdfPathIn");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->strpdfpathin(), target);
  }

  // string strOtherPathOut = 3;
  if (this->strotherpathout().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->strotherpathout().data(), static_cast<int>(this->strotherpathout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPCProto.RPC_CALL_FUNC.strOtherPathOut");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->strotherpathout(), target);
  }

  // int32 iSaveFormat = 4;
  if (this->isaveformat() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->isaveformat(), target);
  }

  // uint64 UserData = 5;
  if (this->userdata() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->userdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPCProto.RPC_CALL_FUNC)
  return target;
}

size_t RPC_CALL_FUNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPCProto.RPC_CALL_FUNC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strPdfPathIn = 2;
  if (this->strpdfpathin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->strpdfpathin());
  }

  // string strOtherPathOut = 3;
  if (this->strotherpathout().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->strotherpathout());
  }

  // int32 iFuncID = 1;
  if (this->ifuncid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ifuncid());
  }

  // int32 iSaveFormat = 4;
  if (this->isaveformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->isaveformat());
  }

  // uint64 UserData = 5;
  if (this->userdata() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->userdata());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPC_CALL_FUNC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RPCProto.RPC_CALL_FUNC)
  GOOGLE_DCHECK_NE(&from, this);
  const RPC_CALL_FUNC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPC_CALL_FUNC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RPCProto.RPC_CALL_FUNC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RPCProto.RPC_CALL_FUNC)
    MergeFrom(*source);
  }
}

void RPC_CALL_FUNC::MergeFrom(const RPC_CALL_FUNC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RPCProto.RPC_CALL_FUNC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strpdfpathin().size() > 0) {

    strpdfpathin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strpdfpathin_);
  }
  if (from.strotherpathout().size() > 0) {

    strotherpathout_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strotherpathout_);
  }
  if (from.ifuncid() != 0) {
    set_ifuncid(from.ifuncid());
  }
  if (from.isaveformat() != 0) {
    set_isaveformat(from.isaveformat());
  }
  if (from.userdata() != 0) {
    set_userdata(from.userdata());
  }
}

void RPC_CALL_FUNC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RPCProto.RPC_CALL_FUNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPC_CALL_FUNC::CopyFrom(const RPC_CALL_FUNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPCProto.RPC_CALL_FUNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_CALL_FUNC::IsInitialized() const {
  return true;
}

void RPC_CALL_FUNC::Swap(RPC_CALL_FUNC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPC_CALL_FUNC::InternalSwap(RPC_CALL_FUNC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  strpdfpathin_.Swap(&other->strpdfpathin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  strotherpathout_.Swap(&other->strotherpathout_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ifuncid_, other->ifuncid_);
  swap(isaveformat_, other->isaveformat_);
  swap(userdata_, other->userdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_CALL_FUNC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RPC_CALL_RESULT::InitAsDefaultInstance() {
}
class RPC_CALL_RESULT::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPC_CALL_RESULT::kUserDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPC_CALL_RESULT::RPC_CALL_RESULT()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RPCProto.RPC_CALL_RESULT)
}
RPC_CALL_RESULT::RPC_CALL_RESULT(const RPC_CALL_RESULT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userdata_ = from.userdata_;
  // @@protoc_insertion_point(copy_constructor:RPCProto.RPC_CALL_RESULT)
}

void RPC_CALL_RESULT::SharedCtor() {
  userdata_ = PROTOBUF_ULONGLONG(0);
}

RPC_CALL_RESULT::~RPC_CALL_RESULT() {
  // @@protoc_insertion_point(destructor:RPCProto.RPC_CALL_RESULT)
  SharedDtor();
}

void RPC_CALL_RESULT::SharedDtor() {
}

void RPC_CALL_RESULT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPC_CALL_RESULT& RPC_CALL_RESULT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPC_CALL_RESULT_rpc_2eproto.base);
  return *internal_default_instance();
}


void RPC_CALL_RESULT::Clear() {
// @@protoc_insertion_point(message_clear_start:RPCProto.RPC_CALL_RESULT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userdata_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RPC_CALL_RESULT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 UserData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userdata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RPC_CALL_RESULT::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:RPCProto.RPC_CALL_RESULT)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 UserData = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userdata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RPCProto.RPC_CALL_RESULT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RPCProto.RPC_CALL_RESULT)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RPC_CALL_RESULT::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RPCProto.RPC_CALL_RESULT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserData = 1;
  if (this->userdata() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->userdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RPCProto.RPC_CALL_RESULT)
}

::PROTOBUF_NAMESPACE_ID::uint8* RPC_CALL_RESULT::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPCProto.RPC_CALL_RESULT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserData = 1;
  if (this->userdata() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->userdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPCProto.RPC_CALL_RESULT)
  return target;
}

size_t RPC_CALL_RESULT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPCProto.RPC_CALL_RESULT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 UserData = 1;
  if (this->userdata() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->userdata());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPC_CALL_RESULT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RPCProto.RPC_CALL_RESULT)
  GOOGLE_DCHECK_NE(&from, this);
  const RPC_CALL_RESULT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPC_CALL_RESULT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RPCProto.RPC_CALL_RESULT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RPCProto.RPC_CALL_RESULT)
    MergeFrom(*source);
  }
}

void RPC_CALL_RESULT::MergeFrom(const RPC_CALL_RESULT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RPCProto.RPC_CALL_RESULT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userdata() != 0) {
    set_userdata(from.userdata());
  }
}

void RPC_CALL_RESULT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RPCProto.RPC_CALL_RESULT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPC_CALL_RESULT::CopyFrom(const RPC_CALL_RESULT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPCProto.RPC_CALL_RESULT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_CALL_RESULT::IsInitialized() const {
  return true;
}

void RPC_CALL_RESULT::Swap(RPC_CALL_RESULT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPC_CALL_RESULT::InternalSwap(RPC_CALL_RESULT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userdata_, other->userdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_CALL_RESULT::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RPCProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RPCProto::RPC_CALL_FUNC* Arena::CreateMaybeMessage< ::RPCProto::RPC_CALL_FUNC >(Arena* arena) {
  return Arena::CreateInternal< ::RPCProto::RPC_CALL_FUNC >(arena);
}
template<> PROTOBUF_NOINLINE ::RPCProto::RPC_CALL_RESULT* Arena::CreateMaybeMessage< ::RPCProto::RPC_CALL_RESULT >(Arena* arena) {
  return Arena::CreateInternal< ::RPCProto::RPC_CALL_RESULT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
