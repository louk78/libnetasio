// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto;
namespace RPCProto {
class RPC_CALL_FUNC;
class RPC_CALL_FUNCDefaultTypeInternal;
extern RPC_CALL_FUNCDefaultTypeInternal _RPC_CALL_FUNC_default_instance_;
class RPC_CALL_RESULT;
class RPC_CALL_RESULTDefaultTypeInternal;
extern RPC_CALL_RESULTDefaultTypeInternal _RPC_CALL_RESULT_default_instance_;
}  // namespace RPCProto
PROTOBUF_NAMESPACE_OPEN
template<> ::RPCProto::RPC_CALL_FUNC* Arena::CreateMaybeMessage<::RPCProto::RPC_CALL_FUNC>(Arena*);
template<> ::RPCProto::RPC_CALL_RESULT* Arena::CreateMaybeMessage<::RPCProto::RPC_CALL_RESULT>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RPCProto {

// ===================================================================

class RPC_CALL_FUNC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RPCProto.RPC_CALL_FUNC) */ {
 public:
  RPC_CALL_FUNC();
  virtual ~RPC_CALL_FUNC();

  RPC_CALL_FUNC(const RPC_CALL_FUNC& from);
  RPC_CALL_FUNC(RPC_CALL_FUNC&& from) noexcept
    : RPC_CALL_FUNC() {
    *this = ::std::move(from);
  }

  inline RPC_CALL_FUNC& operator=(const RPC_CALL_FUNC& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPC_CALL_FUNC& operator=(RPC_CALL_FUNC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPC_CALL_FUNC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPC_CALL_FUNC* internal_default_instance() {
    return reinterpret_cast<const RPC_CALL_FUNC*>(
               &_RPC_CALL_FUNC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RPC_CALL_FUNC* other);
  friend void swap(RPC_CALL_FUNC& a, RPC_CALL_FUNC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPC_CALL_FUNC* New() const final {
    return CreateMaybeMessage<RPC_CALL_FUNC>(nullptr);
  }

  RPC_CALL_FUNC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPC_CALL_FUNC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPC_CALL_FUNC& from);
  void MergeFrom(const RPC_CALL_FUNC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPC_CALL_FUNC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RPCProto.RPC_CALL_FUNC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strPdfPathIn = 2;
  void clear_strpdfpathin();
  static const int kStrPdfPathInFieldNumber = 2;
  const std::string& strpdfpathin() const;
  void set_strpdfpathin(const std::string& value);
  void set_strpdfpathin(std::string&& value);
  void set_strpdfpathin(const char* value);
  void set_strpdfpathin(const char* value, size_t size);
  std::string* mutable_strpdfpathin();
  std::string* release_strpdfpathin();
  void set_allocated_strpdfpathin(std::string* strpdfpathin);

  // string strOtherPathOut = 3;
  void clear_strotherpathout();
  static const int kStrOtherPathOutFieldNumber = 3;
  const std::string& strotherpathout() const;
  void set_strotherpathout(const std::string& value);
  void set_strotherpathout(std::string&& value);
  void set_strotherpathout(const char* value);
  void set_strotherpathout(const char* value, size_t size);
  std::string* mutable_strotherpathout();
  std::string* release_strotherpathout();
  void set_allocated_strotherpathout(std::string* strotherpathout);

  // int32 iFuncID = 1;
  void clear_ifuncid();
  static const int kIFuncIDFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 ifuncid() const;
  void set_ifuncid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 iSaveFormat = 4;
  void clear_isaveformat();
  static const int kISaveFormatFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 isaveformat() const;
  void set_isaveformat(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 UserData = 5;
  void clear_userdata();
  static const int kUserDataFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 userdata() const;
  void set_userdata(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:RPCProto.RPC_CALL_FUNC)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strpdfpathin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strotherpathout_;
  ::PROTOBUF_NAMESPACE_ID::int32 ifuncid_;
  ::PROTOBUF_NAMESPACE_ID::int32 isaveformat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RPC_CALL_RESULT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RPCProto.RPC_CALL_RESULT) */ {
 public:
  RPC_CALL_RESULT();
  virtual ~RPC_CALL_RESULT();

  RPC_CALL_RESULT(const RPC_CALL_RESULT& from);
  RPC_CALL_RESULT(RPC_CALL_RESULT&& from) noexcept
    : RPC_CALL_RESULT() {
    *this = ::std::move(from);
  }

  inline RPC_CALL_RESULT& operator=(const RPC_CALL_RESULT& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPC_CALL_RESULT& operator=(RPC_CALL_RESULT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPC_CALL_RESULT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPC_CALL_RESULT* internal_default_instance() {
    return reinterpret_cast<const RPC_CALL_RESULT*>(
               &_RPC_CALL_RESULT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RPC_CALL_RESULT* other);
  friend void swap(RPC_CALL_RESULT& a, RPC_CALL_RESULT& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPC_CALL_RESULT* New() const final {
    return CreateMaybeMessage<RPC_CALL_RESULT>(nullptr);
  }

  RPC_CALL_RESULT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPC_CALL_RESULT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPC_CALL_RESULT& from);
  void MergeFrom(const RPC_CALL_RESULT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPC_CALL_RESULT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RPCProto.RPC_CALL_RESULT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 UserData = 1;
  void clear_userdata();
  static const int kUserDataFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 userdata() const;
  void set_userdata(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:RPCProto.RPC_CALL_RESULT)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RPC_CALL_FUNC

// int32 iFuncID = 1;
inline void RPC_CALL_FUNC::clear_ifuncid() {
  ifuncid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RPC_CALL_FUNC::ifuncid() const {
  // @@protoc_insertion_point(field_get:RPCProto.RPC_CALL_FUNC.iFuncID)
  return ifuncid_;
}
inline void RPC_CALL_FUNC::set_ifuncid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ifuncid_ = value;
  // @@protoc_insertion_point(field_set:RPCProto.RPC_CALL_FUNC.iFuncID)
}

// string strPdfPathIn = 2;
inline void RPC_CALL_FUNC::clear_strpdfpathin() {
  strpdfpathin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPC_CALL_FUNC::strpdfpathin() const {
  // @@protoc_insertion_point(field_get:RPCProto.RPC_CALL_FUNC.strPdfPathIn)
  return strpdfpathin_.GetNoArena();
}
inline void RPC_CALL_FUNC::set_strpdfpathin(const std::string& value) {
  
  strpdfpathin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RPCProto.RPC_CALL_FUNC.strPdfPathIn)
}
inline void RPC_CALL_FUNC::set_strpdfpathin(std::string&& value) {
  
  strpdfpathin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPCProto.RPC_CALL_FUNC.strPdfPathIn)
}
inline void RPC_CALL_FUNC::set_strpdfpathin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strpdfpathin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPCProto.RPC_CALL_FUNC.strPdfPathIn)
}
inline void RPC_CALL_FUNC::set_strpdfpathin(const char* value, size_t size) {
  
  strpdfpathin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPCProto.RPC_CALL_FUNC.strPdfPathIn)
}
inline std::string* RPC_CALL_FUNC::mutable_strpdfpathin() {
  
  // @@protoc_insertion_point(field_mutable:RPCProto.RPC_CALL_FUNC.strPdfPathIn)
  return strpdfpathin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPC_CALL_FUNC::release_strpdfpathin() {
  // @@protoc_insertion_point(field_release:RPCProto.RPC_CALL_FUNC.strPdfPathIn)
  
  return strpdfpathin_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPC_CALL_FUNC::set_allocated_strpdfpathin(std::string* strpdfpathin) {
  if (strpdfpathin != nullptr) {
    
  } else {
    
  }
  strpdfpathin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strpdfpathin);
  // @@protoc_insertion_point(field_set_allocated:RPCProto.RPC_CALL_FUNC.strPdfPathIn)
}

// string strOtherPathOut = 3;
inline void RPC_CALL_FUNC::clear_strotherpathout() {
  strotherpathout_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPC_CALL_FUNC::strotherpathout() const {
  // @@protoc_insertion_point(field_get:RPCProto.RPC_CALL_FUNC.strOtherPathOut)
  return strotherpathout_.GetNoArena();
}
inline void RPC_CALL_FUNC::set_strotherpathout(const std::string& value) {
  
  strotherpathout_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RPCProto.RPC_CALL_FUNC.strOtherPathOut)
}
inline void RPC_CALL_FUNC::set_strotherpathout(std::string&& value) {
  
  strotherpathout_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPCProto.RPC_CALL_FUNC.strOtherPathOut)
}
inline void RPC_CALL_FUNC::set_strotherpathout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strotherpathout_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPCProto.RPC_CALL_FUNC.strOtherPathOut)
}
inline void RPC_CALL_FUNC::set_strotherpathout(const char* value, size_t size) {
  
  strotherpathout_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPCProto.RPC_CALL_FUNC.strOtherPathOut)
}
inline std::string* RPC_CALL_FUNC::mutable_strotherpathout() {
  
  // @@protoc_insertion_point(field_mutable:RPCProto.RPC_CALL_FUNC.strOtherPathOut)
  return strotherpathout_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPC_CALL_FUNC::release_strotherpathout() {
  // @@protoc_insertion_point(field_release:RPCProto.RPC_CALL_FUNC.strOtherPathOut)
  
  return strotherpathout_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPC_CALL_FUNC::set_allocated_strotherpathout(std::string* strotherpathout) {
  if (strotherpathout != nullptr) {
    
  } else {
    
  }
  strotherpathout_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strotherpathout);
  // @@protoc_insertion_point(field_set_allocated:RPCProto.RPC_CALL_FUNC.strOtherPathOut)
}

// int32 iSaveFormat = 4;
inline void RPC_CALL_FUNC::clear_isaveformat() {
  isaveformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RPC_CALL_FUNC::isaveformat() const {
  // @@protoc_insertion_point(field_get:RPCProto.RPC_CALL_FUNC.iSaveFormat)
  return isaveformat_;
}
inline void RPC_CALL_FUNC::set_isaveformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isaveformat_ = value;
  // @@protoc_insertion_point(field_set:RPCProto.RPC_CALL_FUNC.iSaveFormat)
}

// uint64 UserData = 5;
inline void RPC_CALL_FUNC::clear_userdata() {
  userdata_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RPC_CALL_FUNC::userdata() const {
  // @@protoc_insertion_point(field_get:RPCProto.RPC_CALL_FUNC.UserData)
  return userdata_;
}
inline void RPC_CALL_FUNC::set_userdata(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userdata_ = value;
  // @@protoc_insertion_point(field_set:RPCProto.RPC_CALL_FUNC.UserData)
}

// -------------------------------------------------------------------

// RPC_CALL_RESULT

// uint64 UserData = 1;
inline void RPC_CALL_RESULT::clear_userdata() {
  userdata_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RPC_CALL_RESULT::userdata() const {
  // @@protoc_insertion_point(field_get:RPCProto.RPC_CALL_RESULT.UserData)
  return userdata_;
}
inline void RPC_CALL_RESULT::set_userdata(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userdata_ = value;
  // @@protoc_insertion_point(field_set:RPCProto.RPC_CALL_RESULT.UserData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RPCProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
